#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 05 * * *')]),
  parameters([
          string(name: 'URL_TO_TEST', defaultValue: 'http://pcq-consolidation-service-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
          string(name: 'PCQ_BACKEND_URL', defaultValue: 'http://pcq-consolidation-service-aat.service.core-compute-aat.internal', description: 'The PCQ backend URL'),
          string(name: 'SecurityRules',
                  defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                  description: 'The URL you want to run these tests against'),
  ])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "pcq"
def component = "consolidation-service"

def secrets = [
        'pcq-${env}': [
                secret( 'jwt-secret', 'JWT_SECRET'),
                secret( 's2s-secret-pcq-consolidation-service', 'S2S_SECRET'),
                secret( 'idam-users-pcq-username', 'IDAM_USERS_PCQ_USERNAME'),
                secret( 'idam-users-pcq-password', 'IDAM_USERS_PCQ_PASSWORD'),
                secret( 'idam-client-secret', 'IDAM_CLIENT_SECRET')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.PCQ_BACKEND_URL = params.PCQ_BACKEND_URL
    env.Rules = params.SecurityRules

    loadVaultSecrets(secrets)

    enableAksStagingDeployment()
    disableLegacyDeployment()
    nonServiceApp()

    enableSecurityScan()

    enableMutationTest()
    after('mutationTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'builds/reports/pitest/**/*'
    }

    enableFullFunctionalTest()
    before('fullFunctionalTest') {
        echo "Loading the secrets again"
        loadVaultSecrets(secrets)

        // To run functional tests
        env.S2S_NAME = 'pcq_consolidation_service'
        env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
        env.DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
        env.CORE_CASE_DATA_API_URL = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'
        env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
        env.IDAM_CLIENT_NAME = 'pcq'
        env.IDAM_CLIENT_REDIRECT_URI = 'https://pcq-consolidation-service-aat.service.core-compute-aat.internal/oauth2/callback'
        env.PCQ_BACKEND_URL = "http://pcq-backend-aat.service.core-compute-aat.internal"

        echo "Just waiting a while to ensure that the pod has run the job"
        sh "sleep 120s"
        echo "Verifying that functional test data was processed correctly"
        try {
            builder.gradle('functionalPostDeploy')
        } finally {
            junit '**/test-results/**/*.xml'
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/test-results/**'
        }
    }

    enableSlackNotifications('#pcq-builds')
}
